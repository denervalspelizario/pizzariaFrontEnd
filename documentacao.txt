-- criar aplicação limpar index.tsx e css
-- criar estilos globais essa aplicaçãos será usado sass
** yarn add sass 

-- criação de input e textarea como componentes em src>components>ui>input 
-- criação de button como components em src>components>ui>button
Obs components criados inputs e btn que serão reultilizados

-- adicionar todos os components criados em src>pages>index.tsx ela sera a pagina de login
-- adicionar estilizacao e responsividade

-- cricação de pagina de cadastro
-- criação de context api para poder acessar de todas as paginas os dados da api
-- cria-se src>context>AuthContext toda a logica do context depois em _app.tsx usando authprovider para abraçar dos components
-- criou o context em _app.tsx usando AuthProvider abrace todos os components para todaa aplicação ter acesso ao context


** yarn add react-icons
** yarn add react-toastify    para alertas   não esquecer de importar globalmente em _app.tsx

 

-- criando context
-- criar components>contexts>AuthContext.ts é nele será criado o context que abraçará todas as rotas
-- vá em _app.tsx e adicione o AuthProvider sobre todos os Component
-- sempre que vc precisar usar o context em uma aplicação import o useContext do react e o AuthContext do contexto criado
-- dentro de AuthContext vai ter as funções para logar e deslogar ja ans pages vc pega os dados para poder usar no AuthContext

Para acessar requisições api

** yarn add axios nookies jwt-decode
-- criar src>services>api.ts neta tera configuração de api base e tratamento de erro(opcional)
-- no tratamento de erro foi criado services>errors>AuthTokenError.ts que indicará erro no token
-- depois criar src>services>apiClient.ts  nela vai receber os dados de api.ts ou seja apiClient facilita o uso de api.ts
   é ele que chamamos nas requisições que neste caso será apenas " api "
-- depois de criado em authContext funções de login e logout  rodar o back-end e testar se esta fazendo o login e jogando proxima rota
-- ir para pagina de cadastro e seguir msm padrão, funçãod e cadastrar assim como login e logout ficam em auth

-- foi adicionado ao projeto os alertas usando biblioteca react-toastify

-- CRIAÇÃO DE ROTAS PRIVADAS DEPOIS DE LOGAR

- no final de index.tsx criar o serversiders que vai renderizar antes de renderizar o front
- nesse serversider será usado o canSSRGuest
- crie src>utils  canSSRGuest = usuarios logados   , canSSRAuth = usuario deslogados 


